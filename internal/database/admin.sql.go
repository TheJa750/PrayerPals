// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const banUser = `-- name: BanUser :exec
UPDATE users_groups
SET is_banned = TRUE, kicked_until = NULL, modded_reason = $3,
    modded_at = NOW(), modded_by = $4
WHERE user_id = $1 AND group_id = $2
`

type BanUserParams struct {
	UserID       uuid.UUID
	GroupID      uuid.UUID
	ModdedReason string
	ModdedBy     uuid.NullUUID
}

func (q *Queries) BanUser(ctx context.Context, arg BanUserParams) error {
	_, err := q.db.ExecContext(ctx, banUser,
		arg.UserID,
		arg.GroupID,
		arg.ModdedReason,
		arg.ModdedBy,
	)
	return err
}

const getKickBanStatus = `-- name: GetKickBanStatus :one
SELECT is_banned, is_kicked, kicked_until
FROM users_groups
WHERE user_id = $1 AND group_id = $2
`

type GetKickBanStatusParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

type GetKickBanStatusRow struct {
	IsBanned    bool
	IsKicked    bool
	KickedUntil sql.NullTime
}

func (q *Queries) GetKickBanStatus(ctx context.Context, arg GetKickBanStatusParams) (GetKickBanStatusRow, error) {
	row := q.db.QueryRowContext(ctx, getKickBanStatus, arg.UserID, arg.GroupID)
	var i GetKickBanStatusRow
	err := row.Scan(&i.IsBanned, &i.IsKicked, &i.KickedUntil)
	return i, err
}

const kickUser = `-- name: KickUser :exec
UPDATE users_groups
SET is_kicked = TRUE, kicked_until = NOW() + INTERVAL '7 days', modded_reason = $3,
    modded_at = NOW(), modded_by = $4
WHERE user_id = $1 AND group_id = $2
`

type KickUserParams struct {
	UserID       uuid.UUID
	GroupID      uuid.UUID
	ModdedReason string
	ModdedBy     uuid.NullUUID
}

func (q *Queries) KickUser(ctx context.Context, arg KickUserParams) error {
	_, err := q.db.ExecContext(ctx, kickUser,
		arg.UserID,
		arg.GroupID,
		arg.ModdedReason,
		arg.ModdedBy,
	)
	return err
}

const removePostsByUser = `-- name: RemovePostsByUser :exec
UPDATE posts
SET is_deleted = TRUE, updated_at = NOW()
WHERE user_id = $1 AND group_id = $2 AND is_deleted = FALSE
`

type RemovePostsByUserParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) RemovePostsByUser(ctx context.Context, arg RemovePostsByUserParams) error {
	_, err := q.db.ExecContext(ctx, removePostsByUser, arg.UserID, arg.GroupID)
	return err
}

const unbanUser = `-- name: UnbanUser :exec
UPDATE users_groups
SET is_banned = FALSE, kicked_until = NULL, modded_reason = '',
    modded_at = NOW(), modded_by = $3
WHERE user_id = $1 AND group_id = $2
`

type UnbanUserParams struct {
	UserID   uuid.UUID
	GroupID  uuid.UUID
	ModdedBy uuid.NullUUID
}

func (q *Queries) UnbanUser(ctx context.Context, arg UnbanUserParams) error {
	_, err := q.db.ExecContext(ctx, unbanUser, arg.UserID, arg.GroupID, arg.ModdedBy)
	return err
}
