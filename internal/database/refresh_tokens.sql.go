// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUserToken = `-- name: CreateUserToken :one
INSERT INTO refresh_tokens (token, user_id, expires_at)
VALUES ($1, $2, NOW() + INTERVAL '30 days')
RETURNING token, user_id, created_at, updated_at, expires_at, revoked_at
`

type CreateUserTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) CreateUserToken(ctx context.Context, arg CreateUserTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createUserToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT token, user_id, created_at, updated_at, expires_at, revoked_at FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeUserToken = `-- name: RevokeUserToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeUserToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeUserToken, token)
	return err
}
