// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const adjustUserGroupRole = `-- name: AdjustUserGroupRole :exec
UPDATE users_groups
SET role = $1
WHERE user_id = $2 AND group_id = $3
`

type AdjustUserGroupRoleParams struct {
	Role    string
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) AdjustUserGroupRole(ctx context.Context, arg AdjustUserGroupRoleParams) error {
	_, err := q.db.ExecContext(ctx, adjustUserGroupRole, arg.Role, arg.UserID, arg.GroupID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, hashed_password)
VALUES ($1, $2, $3)
RETURNING id, username, email
`

type CreateUserParams struct {
	Username       string
	Email          string
	HashedPassword string
}

type CreateUserRow struct {
	ID       uuid.UUID
	Username string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, created_at, updated_at, hashed_password, is_active
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsActive,
	)
	return i, err
}

const getUserGroupIDs = `-- name: GetUserGroupIDs :many
SELECT group_id
FROM users_groups
WHERE user_id = $1
`

func (q *Queries) GetUserGroupIDs(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroupIDs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var group_id uuid.UUID
		if err := rows.Scan(&group_id); err != nil {
			return nil, err
		}
		items = append(items, group_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserGroupRole = `-- name: GetUserGroupRole :one
SELECT role
FROM users_groups
WHERE user_id = $1 AND group_id = $2
`

type GetUserGroupRoleParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
}

func (q *Queries) GetUserGroupRole(ctx context.Context, arg GetUserGroupRoleParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserGroupRole, arg.UserID, arg.GroupID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getUserIDByEmail = `-- name: GetUserIDByEmail :one
SELECT id, username, email, created_at, updated_at, hashed_password, is_active
FROM users
WHERE email = $1
`

func (q *Queries) GetUserIDByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
		&i.IsActive,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec
TRUNCATE TABLE users CASCADE
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET hashed_password = $1
WHERE id = $2
`

type UpdateUserPasswordParams struct {
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.HashedPassword, arg.ID)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE users
SET username = $1
WHERE id = $2
`

type UpdateUsernameParams struct {
	Username string
	ID       uuid.UUID
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUsername, arg.Username, arg.ID)
	return err
}
