// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO posts (user_id, group_id, content, parent_post_id)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, group_id, content, created_at, updated_at, parent_post_id, is_deleted
`

type CreateCommentParams struct {
	UserID       uuid.UUID
	GroupID      uuid.UUID
	Content      string
	ParentPostID uuid.NullUUID
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.UserID,
		arg.GroupID,
		arg.Content,
		arg.ParentPostID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ParentPostID,
		&i.IsDeleted,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (user_id, group_id, content)
VALUES ($1, $2, $3)
RETURNING id, user_id, group_id, content, created_at, updated_at, parent_post_id, is_deleted
`

type CreatePostParams struct {
	UserID  uuid.UUID
	GroupID uuid.UUID
	Content string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.UserID, arg.GroupID, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ParentPostID,
		&i.IsDeleted,
	)
	return i, err
}

const deleteCommentsFromPost = `-- name: DeleteCommentsFromPost :exec
UPDATE posts
SET updated_at = CURRENT_TIMESTAMP, is_deleted = TRUE
WHERE parent_post_id = $1
`

func (q *Queries) DeleteCommentsFromPost(ctx context.Context, parentPostID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteCommentsFromPost, parentPostID)
	return err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts
SET is_deleted = TRUE, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getCommentsByPostID = `-- name: GetCommentsByPostID :many
SELECT
    posts.id,
    posts.content,
    posts.user_id,
    posts.group_id,
    posts.created_at,
    users.username
FROM posts
LEFT JOIN users ON posts.user_id = users.id
WHERE posts.parent_post_id = $1
AND posts.is_deleted = FALSE
ORDER BY posts.created_at DESC
`

type GetCommentsByPostIDRow struct {
	ID        uuid.UUID
	Content   string
	UserID    uuid.UUID
	GroupID   uuid.UUID
	CreatedAt sql.NullTime
	Username  sql.NullString
}

func (q *Queries) GetCommentsByPostID(ctx context.Context, parentPostID uuid.NullUUID) ([]GetCommentsByPostIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPostID, parentPostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostIDRow
	for rows.Next() {
		var i GetCommentsByPostIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.GroupID,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByID = `-- name: GetPostByID :one
SELECT 
    posts.id,
    posts.content,
    posts.user_id,
    posts.group_id,
    posts.created_at,
    users.username
FROM posts
LEFT JOIN users ON posts.user_id = users.id
WHERE posts.id = $1
AND posts.is_deleted = FALSE
`

type GetPostByIDRow struct {
	ID        uuid.UUID
	Content   string
	UserID    uuid.UUID
	GroupID   uuid.UUID
	CreatedAt sql.NullTime
	Username  sql.NullString
}

func (q *Queries) GetPostByID(ctx context.Context, id uuid.UUID) (GetPostByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.GroupID,
		&i.CreatedAt,
		&i.Username,
	)
	return i, err
}

const getPostsByGroupID = `-- name: GetPostsByGroupID :many
SELECT id, user_id, group_id, content, created_at, updated_at, parent_post_id, is_deleted FROM posts
WHERE group_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetPostsByGroupID(ctx context.Context, groupID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GroupID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ParentPostID,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsForFeed = `-- name: GetPostsForFeed :many
SELECT
    posts.id,
    posts.content,
    posts.user_id,
    posts.group_id,
    posts.created_at,
    users.username,
    COUNT(comments.id) AS comment_count
FROM posts
LEFT JOIN users ON posts.user_id = users.id
LEFT JOIN posts AS comments ON posts.id = comments.parent_post_id
WHERE posts.group_id = $1
AND posts.parent_post_id IS NULL
AND posts.is_deleted = FALSE
GROUP BY posts.id, posts.content, posts.user_id, posts.group_id, posts.created_at, users.username
ORDER BY posts.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPostsForFeedParams struct {
	GroupID uuid.UUID
	Limit   int32
	Offset  int32
}

type GetPostsForFeedRow struct {
	ID           uuid.UUID
	Content      string
	UserID       uuid.UUID
	GroupID      uuid.UUID
	CreatedAt    sql.NullTime
	Username     sql.NullString
	CommentCount int64
}

func (q *Queries) GetPostsForFeed(ctx context.Context, arg GetPostsForFeedParams) ([]GetPostsForFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFeed, arg.GroupID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForFeedRow
	for rows.Next() {
		var i GetPostsForFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserID,
			&i.GroupID,
			&i.CreatedAt,
			&i.Username,
			&i.CommentCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetPosts = `-- name: ResetPosts :exec
TRUNCATE TABLE posts CASCADE
`

func (q *Queries) ResetPosts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPosts)
	return err
}

const restorePost = `-- name: RestorePost :one
UPDATE posts
SET is_deleted = FALSE, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, user_id, group_id, content, created_at, updated_at, parent_post_id, is_deleted
`

func (q *Queries) RestorePost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, restorePost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ParentPostID,
		&i.IsDeleted,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET content = $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
AND is_deleted = FALSE
RETURNING id, user_id, group_id, content, created_at, updated_at, parent_post_id, is_deleted
`

type UpdatePostParams struct {
	Content string
	ID      uuid.UUID
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost, arg.Content, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GroupID,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ParentPostID,
		&i.IsDeleted,
	)
	return i, err
}
